#Switch Database: 
>use dbName (in terminal)

#Collection is like table in sql db

#2 ways to create collection.
i) db.createCollection("collectionName")
ii) db.collectionName.insertOne(Object)
- collection will automatically be created during insert process. Empty collections are actually not created in mongodb.

=========INSERT=========
#2 ways to insert a document in mongodb:
i) insertOne(Object) // inserts single object
ii) insertMany([arry of objects]) // inserts array of objects



======FIND=============
#2 ways to find data:
i) find() // accepts a query object, if left empty, all documents will be returned.
ii)findOne() //returns only one result.
* parameter: to query specific Data, use query parameter inside find({key:value}) or findOne({key:value}) .
* Projection: Both find methods accept a second parameter(optional) called projection. It is an object that describes which fields to include in the results.
              If this field omitted, all fields will be included in the results.
	      eg: db.posts.find({valueToFind..},{projectionKey:1 or 0,..}) // all the projectionKeys must be either 0 or 1, if 0, only these field will be excluded and for 1, only these fields will be included.
              exception: can use 0 for _id field (auto generated) and 1 with other values. eg: db.posts.find({},{_id:0,title:1,date:1})


========= UPDATE =========
#2 ways to update data:
i)updateOne({keyValueToSelectSpecificObject},{$specialKeyword:{newKeyValueToUpdate}) //updates only one (first matched result) document.
ii)updateMany(...same as above) // will update all documents that match the provided query.
*Special keyword like: $set (to set value), $inc (increment)
*)upsert // If you would like to insert the document if it is not found, you can use the upsert option.



========== DELETE ==============
i)deleteOne() //deletes first matched object
ii) deleteMany() //deletes all the matched object


============ ARRAY ==================
i)$addToSet: add distinct(পৃথক/স্পষ্ট)  elements to an array.




============ Aggregation ===================
>> db.collectionName.aggregate([...])

*Remember that the order of your stages matters. Each stage only acts upon the documents that previous stages provide.

#Definition from ChatGPT:
Imagine you have a bunch of documents in a collection, each representing a person with their name, age, and city. 
Aggregation allows you to answer questions like:
    What is the average age of all the people in the collection?
    How many people live in each city?
    What are the most common names among all the people?
    What is the total age of all people from a specific city?
For example, to find the average age of all people, you would use the following aggregation stages:

    $group: This stage groups the documents together, treating them as a single entity.
    $project: This stage allows you to shape the output by specifying the fields you want to include or exclude.
    $avg: This stage calculates the average age based on the grouped documents.

By combining these stages, you can manipulate and transform your data in a flexible and efficient way
# My definition: Aggregation is used to run operation (like: sum,average etc.) on a whole collection.

# Aggregation $group: 
This aggregation stage groups documents by the unique _id expression provided.

(Don't confuse this _id expression with the _id ObjectId provided to each document.)

# Aggregation $project:
Same as $project in find() method. Just add either 0 or 1 as value to exclude or include fields in result.exception: you can 
use 0 for _id: field and 1 with others field to exclude _id.

# Aggregation $sort:
This aggregation stage groups sorts all documents in the specified sort order.
>> sort order values: 1 ( for ascending order) and -1 (for descending order)

# Aggregation $match:
This aggregation stage behaves like a find. It will filter documents that match query provided.
*) Using $match early in the pipeline (পাইপলাইনের প্রথম দিকে এটি ব্যবহার করলে) can improve performance since it limits the number of documents the next stages must process. 














-------------------NOTES-----------------------------
* If you try to insert documents into a collection that does not exist, MongoDB will create the collection automatically.




